{"version":3,"sources":["components/Pages/Home/Home.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Home","state","moves","noOfDisks","noOfTowers","disks","activeDisk","disk","tower","changeDisks","count","event","console","log","setState","prevState","reset","pickDisk","index","alert","towers","x","Array","parseInt","keys","shift","moveDisk","destinationTower","length","unshift","discs","this","className","style","padding","onClick","fontSize","color","margin","cursor","Object","map","width","background","borderRadius","display","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.d24812c8.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport './Home.scss'\n\n/*\n    07.35 (started)\n    08.48 - 09.13 (break) (1.13)\n    09.18 - 10.31 (break) (1.18)\n    10.54 - 22.35 (break) (1.43)\n    00.12 (finished) (3.20)\n* */\n\nclass Home extends Component{\n    state = {\n        moves:0,\n        noOfDisks:5,\n        noOfTowers:3,\n        disks: {\n            1: [1, 2, 3, 4, 5],\n            2: [],\n            3: []\n        },\n        activeDisk:{\n            disk:0,\n            tower:0\n        },\n    }\n\n    changeDisks = (count) => (event) => {\n        console.log(count)\n        this.setState(prevState => ({\n            noOfDisks:(count === 'dn' ? prevState.noOfDisks-1 : prevState.noOfDisks+1)\n            //noOfDisks: prevState.noOfDisks+1\n        }),this.reset)\n    }\n\n    pickDisk = (disk, index, tower) => (event) => {\n        if(index === 0) {\n            this.setState({\n                activeDisk: {\n                    disk:disk,\n                    tower:tower\n                }\n            })\n        }else {\n            alert('You can\\'t select lower discs')\n        }\n    }\n\n    reset = () => {\n        let towers = []\n        for(let x=1; x <= this.state.noOfTowers; x++){\n            towers[x] = []\n        }\n        towers[1] = [...Array(parseInt(this.state.noOfDisks)+1).keys()];\n        towers[1].shift()\n        this.setState({\n            moves:0,\n            disks: towers\n\n        })\n    }\n\n    moveDisk = (destinationTower) => (event) => {\n        const {disks, activeDisk} = this.state\n\n        if(activeDisk.tower !==0) {\n            if(disks[destinationTower][0] > activeDisk.disk || disks[destinationTower].length === 0) {\n                disks[activeDisk.tower].shift(activeDisk.disk)\n                disks[destinationTower].unshift(activeDisk.disk)\n            }else {\n                alert('You can\\'t move bigger disks on to smaller disks')\n            }\n        }else {\n            alert('Please select a disk to move here')\n        }\n\n        this.setState(prevState => ({\n            moves:prevState.moves+1,\n            discs :{\n                disks\n            },\n            activeDisk:{\n                disk:0,\n                tower:0\n            },\n        }))\n    }\n\n    render() {\n        const {disks, activeDisk} = this.state;\n        return (\n            <>\n                <div className={'text-center'} style={{padding:'10px'}}>\n                    Disc count\n                    <span onClick={this.changeDisks('dn')} className={'button'}>-</span>\n                    <span style={{fontSize:'1.5em', 'margin':'0 5px'}}>{this.state.noOfDisks}</span>\n                    <span onClick={this.changeDisks('up')} className={'button'}>+</span>\n                    <span onClick={this.reset} style={{color: '#888', margin:'10px', cursor:'pointer'}}>Reset</span>\n                    <div style={{margin:'15px 0 10px'}}> Minimum Moves {2**this.state.noOfDisks - 1}</div>\n                </div>\n                <div className={'towers'}>\n                    {\n                        Object.keys(disks).map((tower, index) => (\n                            <div key={index} className={'tower'}>\n                                <div onClick={this.moveDisk(tower)} className={'towerLabel'}>Tower {tower}</div>\n                                {\n                                    disks[tower].map((x, index) => {\n                                        return (\n                                            <div\n                                                key={index}\n                                                onClick={this.pickDisk(x, index, tower)}\n                                                className={'disk'}\n                                                style={{\n                                                    width: (x / this.state.noOfDisks * 90) + '%',\n                                                    background: (activeDisk.disk === x ? '#f00' : '#555')\n                                                }}\n                                            >{x}</div>\n                                        )\n                                    })\n                                }\n                            </div>\n                        ))\n                    }\n                </div>\n\n                <div className={'text-center'} style={{margin:'20px 0'}}>Moves by you <span style={{background:(this.state.moves <= 2**this.state.noOfDisks - 1 ? 'green' : 'red'), padding: '10px', color:'white', borderRadius: '5px', width:'20px', display:'inline-block'}}>{this.state.moves}</span></div>\n            </>\n        )\n    }\n}\n\nexport default Home","import React from 'react';\nimport './App.css';\nimport Home from \"./components/Pages/Home/Home\";\n\nfunction App() {\n  return (\n      <>\n        <h1 className={'text-center'}>Hanoi Towers</h1>\n          <p className={'text-center'} style={{color:'#888'}}>Instructions: Select a disc you want to move and then select the Tower name you want your selected disc to move.</p>\n        <Home />\n      </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}